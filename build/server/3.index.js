require("source-map-support").install(),exports.ids=[3],exports.modules={72:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){var e="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;return function(t,r,o,s){var a=t&&t.defaultProps,n=arguments.length-3;if(r||0===n||(r={}),r&&a)for(var i in a)void 0===r[i]&&(r[i]=a[i]);else r||(r=a||{});if(1===n)r.children=s;else if(n>1){for(var l=Array(n),d=0;n>d;d++)l[d]=arguments[d+3];r.children=l}return{$$typeof:e,type:t,key:void 0===o?null:""+o,ref:null,props:r,_owner:null}}}(),a=r(58),n=r(9),i=(o(n),r(35)),l=r(118),d=r(14),u=(r(20),r(27)),c=o(u),f=r(60),v=o(f),p={fetch:function(e){var t=e.dispatch,r=e.params.slug;return t((0,l.loadPost)(r))}},_=function(e){return{title:e.currentPost.data.title,content:e.currentPost.data.content,isLoading:e.currentPost.isLoading,error:e.currentPost.error}},y=s(v["default"],{}),m=function(e){var t=e.title,r=e.content,o=e.isLoading,a=e.error;return a?y:s("div",{},void 0,s("div",{className:"row between-xs middle-xs"},void 0,s("div",{className:"col-xs-2"},void 0,s("div",{className:"box"},void 0,"xxxxx")),s("div",{className:"col-xs-4"},void 0,s("div",{className:"box"},void 0,"aaaaa")),s("div",{className:"col-xs-2"},void 0,s("div",{className:"box"},void 0,"ssss"))),s(c["default"],{title:t}),o&&s("div",{},void 0,s("h2",{className:(0,d.css)(P.title)},void 0,"Loading...."),s("p",{className:(0,d.css)(P.primary)})),!o&&s("div",{},void 0,s("h2",{className:(0,d.css)(P.title)},void 0,t),s("p",{className:(0,d.css)(P.body)},void 0,r)))};m.propTypes={title:n.PropTypes.string,content:n.PropTypes.string,isLoading:n.PropTypes.bool,error:n.PropTypes.object};var P=d.StyleSheet.create({body:{fontSize:"1.25rem",lineHeight:"1.5",margin:"1rem 0"},title:{fontSize:"36px",margin:"1rem 0",color:"#000"}});t["default"]=(0,a.provideHooks)(p)((0,i.connect)(_)(m))},73:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function s(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function a(){var e=arguments.length<=0||void 0===arguments[0]?{lastFetched:null,isLoading:!1,error:null,data:{}}:arguments[0],t=arguments[1];switch(t.type){case i.LOAD_POST_REQUEST:return(0,d["default"])(e,{isLoading:{$set:!0},error:{$set:null}});case i.LOAD_POST_SUCCESS:return(0,d["default"])(e,{data:{$set:t.body},lastFetched:{$set:t.lastFetched},isLoading:{$set:!1}});case i.LOAD_POST_FAILURE:return(0,d["default"])(e,{error:{$set:t.error}});default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var n=r(15),i=s(n),l=r(55),d=o(l)},118:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function s(e){return{types:[a.LOAD_POST_REQUEST,a.LOAD_POST_SUCCESS,a.LOAD_POST_FAILURE],callAPI:function(){return i["default"].get("/api/v0/post/"+e)},payload:{slug:e}}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadPost=s;var a=r(15),n=r(74),i=o(n)}};
//# sourceMappingURL=data:application/json;base64,