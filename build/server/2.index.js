require("source-map-support").install(),exports.ids=[2],exports.modules={71:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){var t=e.environment;return{height:t.height,width:t.width,isMobile:t.isMobile}}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){var e="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;return function(t,n,i,o){var r=t&&t.defaultProps,s=arguments.length-3;if(n||0===s||(n={}),n&&r)for(var a in r)void 0===n[a]&&(n[a]=r[a]);else n||(n=r||{});if(1===s)n.children=o;else if(s>1){for(var l=Array(s),u=0;s>u;u++)l[u]=arguments[u+3];n.children=l}return{$$typeof:e,type:t,key:void 0===i?null:""+i,ref:null,props:n,_owner:null}}}(),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),c=n(9),d=(i(c),n(27)),p=i(d),h=n(14),f=n(35),w=n(112),y=n(108),v=i(y),m=l(p["default"],{title:"微信 WEBAPP",titleTemplate:"%s - 服务端渲染"}),b=l(v["default"],{showUnder:500}),O=function(e){function t(e){return o(this,t),r(this,Object.getPrototypeOf(t).call(this,e))}return s(t,e),u(t,[{key:"componentDidMount",value:function(){var e=this.props.dispatch;e((0,w.initEnvironment)())}},{key:"render",value:function(){return l("button",{},void 0,"'right'"),l("div",{},void 0,m,this.props.children,b)}}]),t}(c.Component);O.propTypes={children:c.PropTypes.node,dispatch:c.PropTypes.func.isRequired},h.StyleSheet.create({root:{maxWidth:700,color:"#000",margin:"2rem auto"}}),t["default"]=(0,f.connect)(a)(O)},108:function(e,t,n){"use strict";var i=function(){var e="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;return function(t,n,i,o){var r=t&&t.defaultProps,s=arguments.length-3;if(n||0===s||(n={}),n&&r)for(var a in r)void 0===n[a]&&(n[a]=r[a]);else n||(n=r||{});if(1===s)n.children=o;else if(s>1){for(var l=Array(s),u=0;s>u;u++)l[u]=arguments[u+3];n.children=l}return{$$typeof:e,type:t,key:void 0===i?null:""+i,ref:null,props:n,_owner:null}}}(),o=n(9),r=n(214),s=n(28),a=i("span",{},void 0,i(s,{name:"ChevronUpCircle"})),l=o.createClass({displayName:"ScrollUp",data:{startValue:0,currentTime:0,startTime:null,rafId:null},propTypes:{topPosition:o.PropTypes.number,showUnder:o.PropTypes.number.isRequired,easing:o.PropTypes.oneOf(["linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce"]),duration:o.PropTypes.number,style:o.PropTypes.object},getDefaultProps:function(){return{duration:250,easing:"easeOutCubic",style:{position:"fixed",bottom:50,right:30,transitionDuration:"0.3s",transitionTimingFunction:"linear",transitionDelay:"0s",display:"block",width:"50px",height:"50px",borderRadius:"50%",lineHeight:"50px",textAlign:"center",fontSize:"45px",color:"#F06066",overflow:"hidden",zIndex:"9999"},topPosition:0}},getInitialState:function(){return{show:!1}},shouldComponentUpdate:function(e,t){return t.show!==this.state.show},componentDidMount:function(){this.handleScroll(),window.addEventListener("scroll",this.handleScroll),window.addEventListener("wheel",this.stopScrolling,!1),window.addEventListener("touchstart",this.stopScrolling,!1)},componentWillUnmount:function(){window.removeEventListener("scroll",this.handleScroll),window.removeEventListener("wheel",this.stopScrolling,!1),window.removeEventListener("touchstart",this.stopScrolling,!1)},handleScroll:function(){window.scrollY>this.props.showUnder?this.setState({show:!0}):this.setState({show:!1})},handleClick:function(){this.stopScrolling(),this.data.startValue=window.scrollY,this.data.currentTime=0,this.data.startTime=null,this.data.rafId=window.requestAnimationFrame(this.scrollStep)},scrollStep:function(e){this.data.startTime||(this.data.startTime=e),this.data.currentTime=e-this.data.startTime;var t=r[this.props.easing](this.data.currentTime,this.data.startValue,this.props.topPosition,this.props.duration);window.scrollY<=this.props.topPosition?this.stopScrolling():(window.scrollTo(window.scrollY,t),this.data.rafId=window.requestAnimationFrame(this.scrollStep))},stopScrolling:function(){window.cancelAnimationFrame(this.data.rafId)},render:function(){var e=this.props.style,t=i("div",{style:e,onClick:this.handleClick},void 0,a),n=Object.assign({},e);return n.opacity=this.state.show?.8:0,n.visibility=this.state.show?"visible":"hidden",n.transitionProperty="opacity, visibility",o.cloneElement(t,{style:n})}});e.exports=l},112:function(e,t,n){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(e){return{type:u.CHANGE_IS_MOBILE,isMobile:e}}function r(e,t){return{type:u.CHANGE_WIDTH_AND_HEIGHT,height:e,width:t}}function s(){return function(e){var t=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent);e(o(t)),e(r(window.innerHeight,window.innerWidth)),window.onresize=function(){e(r(window.innerHeight,window.innerWidth))}}}function a(e,t){return{type:u.PAGES_INITSTATE,store:e,scoll:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.changeWidthAndHeight=r,t.initEnvironment=s,t.pagesInitialState=a;var l=n(15),u=i(l)},214:function(e,t){e.exports=require("tween-functions")}};
//# sourceMappingURL=data:application/json;base64,