require("source-map-support").install(),exports.ids=[1],exports.modules={60:function(e,t,o){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){var e="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;return function(t,o,r,i){var n=t&&t.defaultProps,a=arguments.length-3;if(o||0===a||(o={}),o&&n)for(var s in n)void 0===o[s]&&(o[s]=n[s]);else o||(o=n||{});if(1===a)o.children=i;else if(a>1){for(var c=Array(a),l=0;a>l;l++)c[l]=arguments[l+3];o.children=c}return{$$typeof:e,type:t,key:void 0===r?null:""+r,ref:null,props:o,_owner:null}}}(),n=o(9),a=(r(n),o(27)),s=r(a),c=(o(14),o(20),i(s["default"],{title:"404"})),l=function(){return i("div",{},void 0,c,i("h1",{},void 0,"Page Not Found!"))};t["default"]=l},109:function(e,t,o){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){var e="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103;return function(t,o,r,i){var n=t&&t.defaultProps,a=arguments.length-3;if(o||0===a||(o={}),o&&n)for(var s in n)void 0===o[s]&&(o[s]=n[s]);else o||(o=n||{});if(1===a)o.children=i;else if(a>1){for(var c=Array(a),l=0;a>l;l++)c[l]=arguments[l+3];o.children=c}return{$$typeof:e,type:t,key:void 0===r?null:""+r,ref:null,props:o,_owner:null}}}(),n=o(9),a=(r(n),o(27)),s=r(a),c=o(14),l=(o(20),o(110)),u=r(l),d=i(s["default"],{title:"About"}),f=function(e){return i("div",{},void 0,d,i("h2",{className:(0,c.css)(p.header)},void 0,"About"),i("p",{className:(0,c.css)(p.lead)},void 0,"This is an example react application (master-detail feed) with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting."),i("h2",{className:(0,c.css)(p.header)},void 0,"Motivation"),i("p",{className:(0,c.css)(p.lead)},void 0,"The file size of isomorphic React apps can quickly get out of hand. Many isomorphic starter kits look awesome to begin with but yield a several megabyte javascript file for the client to download. This project aims to demonstrate some possible solutions."),i("h2",{className:(0,c.css)(p.header)},void 0,"Under the Hood"),i("ul",{className:(0,c.css)(p.list)},void 0,u["default"].map(function(e,t){return i("li",{},void 0,i("h3",{},void 0,i("a",{className:(0,c.css)(p.link),href:e.link,target:"_blank"},void 0,e.resource)),i("p",{className:(0,c.css)(p.body)},void 0,e.description))})))},p=c.StyleSheet.create({header:{fontSize:"36px",lineHeight:"1.5",margin:"0 0 1.5rem"},lead:{fontSize:"1.25rem",lineHeight:"1.5",margin:"0 0 1.5rem",color:"#555"},body:{fontSize:"1rem",lineHeight:"1.5",margin:"0 0 1.5rem",color:"#555"},list:{fontSize:"1rem",listStyle:"none",padding:0},link:{display:"block",fontSize:"1.25rem",margin:"0 0 .5rem",lineHeight:"1.5",fontWeight:"bold",color:"#08c",opacity:1,transition:".2s opacity ease",":hover":{opacity:.5}}});t["default"]=f},110:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=[{resource:"Node.js",link:"https://nodejs.org/en/",description:"Node.jsÂ® is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world."},{resource:"Express",link:"https://github.com/expressjs/express",description:"Fast, unopinionated, minimalist web framework for Node.js"},{resource:"React",link:"https://github.com/facebook/react",description:"A declarative, efficient, and flexible JavaScript library for building user interfaces."},{resource:"Redux",link:"https://github.com/reactjs/redux",description:"Predictable state container for JavaScript apps"},{resource:"React Router 2.0",link:"https://github.com/reactjs/react-router",description:"A complete routing solution for React.js"},{resource:"Aphrodite for CSS",link:"https://github.com/Khan/aphrodite",description:"Support for colocating your styles with your JavaScript component. It's inline styles, but they work!"},{resource:"React Helmet",link:"https://github.com/nfl/react-helmet",description:"A document head manager for React"},{resource:"Redial for data fetching",link:"https://github.com/markdalgleish/redial",description:"Universal data fetching and route lifecycle management for React"},{resource:"Babel 6",link:"https://github.com/babel/babel",description:"Babel is a compiler for writing next generation JavaScript."},{resource:"Webpack",link:"https://github.com/webpack/webpack",description:"Webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset."},{resource:"React Hot Loader",link:"https://github.com/gaearon/react-hot-loader",description:"Tweak React components in real time."}];t["default"]=o},111:function(e,t,o){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=o(109),n=r(i);t["default"]={path:"about",component:n["default"]}},117:function(e,t,o){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=o(60),n=r(i);t["default"]={path:"*",component:n["default"]}},119:function(e,t,o){"use strict";function r(e){return{path:"post/:slug",getComponents:function(t,r){o.e(3,function(t){var n=o(72)["default"],a=o(73)["default"];(0,i.injectAsyncReducer)(e,"currentPost",a),r(null,n)})}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var i=o(36)}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vMS5pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RGb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVzL0Fib3V0L2NvbXBvbmVudHMvQWJvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcy9BYm91dC9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXMvQWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcy9Ob3RGb3VuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVzL1Bvc3QvaW5kZXguanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImluc3RhbGwiLCJleHBvcnRzIiwiaWRzIiwibW9kdWxlcyIsNjAsIm1vZHVsZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2pzeCIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlN5bWJvbCIsInR5cGUiLCJwcm9wcyIsImtleSIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwiY2hpbGRyZW5MZW5ndGgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wTmFtZSIsImNoaWxkQXJyYXkiLCJBcnJheSIsImkiLCIkJHR5cGVvZiIsInVuZGVmaW5lZCIsInJlZiIsIl9vd25lciIsIl9yZWFjdCIsIl9yZWFjdEhlbG1ldCIsIl9yZWFjdEhlbG1ldDIiLCJfcmVmIiwidGl0bGUiLCJOb3RGb3VuZCIsMTA5LCJfYXBocm9kaXRlIiwiX2RhdGEiLCJfZGF0YTIiLCJBYm91dCIsImNsYXNzTmFtZSIsImNzcyIsInN0eWxlcyIsImhlYWRlciIsImxlYWQiLCJsaXN0IiwibWFwIiwiaXRlbSIsImxpbmsiLCJocmVmIiwidGFyZ2V0IiwicmVzb3VyY2UiLCJib2R5IiwiZGVzY3JpcHRpb24iLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwibWFyZ2luIiwiY29sb3IiLCJsaXN0U3R5bGUiLCJwYWRkaW5nIiwiZGlzcGxheSIsImZvbnRXZWlnaHQiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsIjpob3ZlciIsMTEwLCJkYXRhIiwxMTEsIl9BYm91dCIsIl9BYm91dDIiLCJwYXRoIiwiY29tcG9uZW50IiwxMTcsIl9Ob3RGb3VuZCIsIl9Ob3RGb3VuZDIiLDExOSwiY3JlYXRlUm91dGVzIiwic3RvcmUiLCJnZXRDb21wb25lbnRzIiwibG9jYXRpb24iLCJjYiIsImUiLCJQb3N0UGFnZSIsInBvc3RSZWR1Y2VyIiwiX3N0b3JlIiwiaW5qZWN0QXN5bmNSZWR1Y2VyIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBUSxzQkFBc0JDLFVBQzlCQyxRQUFRQyxLQUFPLEdBQ2ZELFFBQVFFLFNBRUZDLEdBQ0EsU0FBU0MsRUFBUUosRUFBU0ssR0FFL0IsWUFvQkEsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsVUFBU0YsR0FsQnZGRyxPQUFPQyxlQUFlWCxFQUFTLGNBQzdCWSxVQUdGLElBQUlDLEdBQU8sV0FBYyxHQUFJQyxHQUF1QyxrQkFBWEMsU0FBeUJBLGVBQWNBLGNBQVcsa0JBQW9CLEtBQVEsT0FBTyxVQUErQkMsRUFBTUMsRUFBT0MsRUFBS0MsR0FBWSxHQUFJQyxHQUFlSixHQUFRQSxFQUFLSSxhQUFrQkMsRUFBaUJDLFVBQVVDLE9BQVMsQ0FBdUQsSUFBL0NOLEdBQTRCLElBQW5CSSxJQUF3QkosTUFBa0JBLEdBQVNHLEVBQWdCLElBQUssR0FBSUksS0FBWUosR0FBd0MsU0FBcEJILEVBQU1PLEtBQXdCUCxFQUFNTyxHQUFZSixFQUFhSSxRQUEyQlAsS0FBU0EsRUFBUUcsTUFBc0IsSUFBdUIsSUFBbkJDLEVBQXdCSixFQUFNRSxTQUFXQSxNQUFpQixJQUFJRSxFQUFpQixFQUFHLENBQTBDLElBQUssR0FBekNJLEdBQWFDLE1BQU1MLEdBQTBCTSxFQUFJLEVBQU9OLEVBQUpNLEVBQW9CQSxJQUFPRixFQUFXRSxHQUFLTCxVQUFVSyxFQUFJLEVBQU1WLEdBQU1FLFNBQVdNLEVBQWMsT0FBU0csU0FBVWQsRUFBb0JFLEtBQU1BLEVBQU1FLElBQWFXLFNBQVJYLEVBQW9CLEtBQU8sR0FBS0EsRUFBS1ksSUFBSyxLQUFNYixNQUFPQSxFQUFPYyxPQUFRLFVDYjE0QkMsRUFBQTNCLEVBQUEsR0FDQTRCLEdEZ0JlM0IsRUFBdUIwQixHQ2hCdEMzQixFQUFBLEtEb0JLNkIsRUFBZ0I1QixFQUF1QjJCLEdBUXZDRSxHQzNCTDlCLEVBQUEsSUFDQUEsRUFBQSxJRDBCWVEsRUFBS3FCLGNBQ2RFLE1DdkJlLFNBRlpDLEVBQVcsV0Q2QmQsTUFBT3hCLEdBQUssU0FBVyxPQUFRc0IsRUFBTXRCLEVBQUssUUFBVSxPQUFRLG9CQUc5RGIsY0N6QmNxQyxHRDZCVEMsSUFDQSxTQUFTbEMsRUFBUUosRUFBU0ssR0FFL0IsWUF3QkEsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsVUFBU0YsR0F0QnZGRyxPQUFPQyxlQUFlWCxFQUFTLGNBQzdCWSxVQUdGLElBQUlDLEdBQU8sV0FBYyxHQUFJQyxHQUF1QyxrQkFBWEMsU0FBeUJBLGVBQWNBLGNBQVcsa0JBQW9CLEtBQVEsT0FBTyxVQUErQkMsRUFBTUMsRUFBT0MsRUFBS0MsR0FBWSxHQUFJQyxHQUFlSixHQUFRQSxFQUFLSSxhQUFrQkMsRUFBaUJDLFVBQVVDLE9BQVMsQ0FBdUQsSUFBL0NOLEdBQTRCLElBQW5CSSxJQUF3QkosTUFBa0JBLEdBQVNHLEVBQWdCLElBQUssR0FBSUksS0FBWUosR0FBd0MsU0FBcEJILEVBQU1PLEtBQXdCUCxFQUFNTyxHQUFZSixFQUFhSSxRQUEyQlAsS0FBU0EsRUFBUUcsTUFBc0IsSUFBdUIsSUFBbkJDLEVBQXdCSixFQUFNRSxTQUFXQSxNQUFpQixJQUFJRSxFQUFpQixFQUFHLENBQTBDLElBQUssR0FBekNJLEdBQWFDLE1BQU1MLEdBQTBCTSxFQUFJLEVBQU9OLEVBQUpNLEVBQW9CQSxJQUFPRixFQUFXRSxHQUFLTCxVQUFVSyxFQUFJLEVBQU1WLEdBQU1FLFNBQVdNLEVBQWMsT0FBU0csU0FBVWQsRUFBb0JFLEtBQU1BLEVBQU1FLElBQWFXLFNBQVJYLEVBQW9CLEtBQU8sR0FBS0EsRUFBS1ksSUFBSyxLQUFNYixNQUFPQSxFQUFPYyxPQUFRLFVFbEQxNEJDLEVBQUEzQixFQUFBLEdBQ0E0QixHRnFEZTNCLEVBQXVCMEIsR0VyRHRDM0IsRUFBQSxLRnlESzZCLEVBQWdCNUIsRUFBdUIyQixHRXhENUNNLEVBQUFsQyxFQUFBLElBRUFtQyxHQURBbkMsRUFBQSxJQUNBQSxFQUFBLE1GOERLb0MsRUFBU25DLEVBQXVCa0MsR0FPaENMLEVBQU90QixFQUFLcUIsY0FDZEUsTUU5RFcsVUFKUk0sRUFBUSxTQUFDekIsR0FDYixNQUFBSixHQUFBLGdCQUFBc0IsRUFBQXRCLEVBQUEsTUZzRUc4QixhRWpFZ0JKLEVBQUFLLEtBQUlDLEVBQU9DLFNGa0UxQixPQUFRLFNBQVVqQyxFQUFLLEtBQ3hCOEIsYUVsRWVKLEVBQUFLLEtBQUlDLEVBQU9FLE9GbUV6QixPQUFRLGtMQUFtTGxDLEVBQUssTUFDak04QixhRWpFZ0JKLEVBQUFLLEtBQUlDLEVBQU9DLFNGa0UxQixPQUFRLGNBQWVqQyxFQUFLLEtBQzdCOEIsYUVsRWVKLEVBQUFLLEtBQUlDLEVBQU9FLE9GbUV6QixPQUFRLGtRQUFtUWxDLEVBQUssTUFDalI4QixhRW5FZ0JKLEVBQUFLLEtBQUlDLEVBQU9DLFNGb0UxQixPQUFRLGtCQUFtQmpDLEVBQUssTUFDakM4QixhRXBFZ0JKLEVBQUFLLEtBQUlDLEVBQU9HLE9GcUUxQixPRXBFSVAsYUFBS1EsSUFBSSxTQUFDQyxFQUFNdkIsR0ZxRXJCLE1BQU9kLEdBQUssUUFBVSxPQUFRQSxFQUFLLFFBQVUsT0FBUUEsRUFBSyxLQUN4RDhCLGFFckVxQkosRUFBQUssS0FBSUMsRUFBT00sTUZzRWhDQyxLRXRFNkNGLEVBQUtDLEtGdUVsREUsT0V2RStELFVGd0U5RCxPRXhFd0VILEVBQUtJLFdBQUx6QyxFQUFBLEtGeUV6RThCLGFFeEVpQkosRUFBQUssS0FBSUMsRUFBT1UsT0Z5RTNCLE9FekVtQ0wsRUFBS00sbUJBTzFDWCxFQUFTTixFQUFBa0IsV0FBV0MsUUFDeEJaLFFBQ0VhLFNBQVUsT0FDVkMsV0FBWSxNQUNaQyxPQUFRLGNBRVZkLE1BQ0VZLFNBQVUsVUFDVkMsV0FBWSxNQUNaQyxPQUFRLGFBQ1JDLE1BQU8sUUFFVFAsTUFDRUksU0FBVSxPQUNWQyxXQUFZLE1BQ1pDLE9BQVEsYUFDUkMsTUFBTyxRQUVUZCxNQUNFVyxTQUFVLE9BQ1ZJLFVBQVcsT0FDWEMsUUFBUyxHQUVYYixNQUNFYyxRQUFTLFFBQ1ROLFNBQVUsVUFDVkUsT0FBUSxZQUNSRCxXQUFZLE1BQ1pNLFdBQVksT0FDWkosTUFBTyxPQUNQSyxRQUFTLEVBQ1RDLFdBQVksbUJBQ1pDLFVBQ0VGLFFBQVMsTUYyRWRuRSxjRXRFYzBDLEdGMEVUNEIsSUFDQSxTQUFTbEUsRUFBUUosR0FFdEIsWUFFQVUsUUFBT0MsZUFBZVgsRUFBUyxjQUM3QlksVUdySkgsSUFBTTJELEtBRUZqQixTQUFVLFVBQ1ZILEtBQUsseUJBQ0xLLFlBQWEsNFFBR2JGLFNBQVUsVUFDVkgsS0FBSyx1Q0FDTEssWUFBYSw4REFHYkYsU0FBVSxRQUNWSCxLQUFLLG9DQUNMSyxZQUFhLDRGQUViRixTQUFVLFFBQ1ZILEtBQUssbUNBQ0xLLFlBQWEsb0RBR2JGLFNBQVUsbUJBQ1ZILEtBQUssMENBQ0xLLFlBQWEsNkNBRWJGLFNBQVUsb0JBQ1ZILEtBQUssb0NBQ0xLLFlBQWEsMEdBR2JGLFNBQVUsZUFDVkgsS0FBSyxzQ0FDTEssWUFBYSxzQ0FFYkYsU0FBVSwyQkFDVkgsS0FBSywwQ0FDTEssWUFBYSxxRUFFYkYsU0FBVSxVQUNWSCxLQUFLLGlDQUNMSyxZQUFhLGdFQUdiRixTQUFVLFVBQ1ZILEtBQUsscUNBQ0xLLFlBQWEsOE1BRWJGLFNBQVUsbUJBQ1ZILEtBQUssOENBQ0xLLFlBQWEsd0NIK0loQnhELGNHM0ljdUUsR0grSVRDLElBQ0EsU0FBU3BFLEVBQVFKLEVBQVNLLEdBRS9CLFlBVUEsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsVUFBU0YsR0FSdkZHLE9BQU9DLGVBQWVYLEVBQVMsY0FDN0JZLFVJMU1ILElBQUE2RCxHQUFBcEUsRUFBQSxLSitNS3FFLEVBQVVwRSxFQUF1Qm1FLEVBSXJDekUsZUloTkMyRSxLQUFNLFFBQ05DLFVBQUFGLGVKc05JRyxJQUNBLFNBQVN6RSxFQUFRSixFQUFTSyxHQUUvQixZQVVBLFNBQVNDLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFVBQVNGLEdBUnZGRyxPQUFPQyxlQUFlWCxFQUFTLGNBQzdCWSxVS2hPSCxJQUFBa0UsR0FBQXpFLEVBQUEsSUxxT0swRSxFQUFhekUsRUFBdUJ3RSxFQUl4QzlFLGVLdE9DMkUsS0FBTSxJQUNOQyxVQUFBRyxlTDRPSUMsSUFDQSxTQUFTNUUsRUFBUUosRUFBU0ssR0FFL0IsWU1oUGMsU0FBUzRFLEdBQWFDLEdBQ25DLE9BQ0VQLEtBQU0sYUFDTlEsY0FBQSxTQUFjQyxFQUFVQyxHQUN0QmhGLEVBQUFpRixFQUFBLEVBR0ssU0FBQ3hGLEdBQ0YsR0FBSXlGLEdBQVdsRixFQUFRLElBQVJBLFdBQ1htRixFQUFjbkYsRUFBUSxJQUFSQSxjQUNsQm9GLEVBQUFDLG9CQUFtQlIsRUFBTyxjQUFlTSxHQUN6Q0gsRUFBRyxLQUFNRSxPTnVPbEI3RSxPQUFPQyxlQUFlWCxFQUFTLGNBQzdCWSxXQUVGWixhTXJQdUJpRixDQUZ4QixJQUFBUSxHQUFBcEYsRUFBQSIsImZpbGUiOiIxLmluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKCk7XG5leHBvcnRzLmlkcyA9IFsxXTtcbmV4cG9ydHMubW9kdWxlcyA9IHtcblxuLyoqKi8gNjA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfanN4ID0gZnVuY3Rpb24gKCkgeyB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIikgfHwgMHhlYWM3OyByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUmF3UmVhY3RFbGVtZW50KHR5cGUsIHByb3BzLCBrZXksIGNoaWxkcmVuKSB7IHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzOyB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMzsgaWYgKCFwcm9wcyAmJiBjaGlsZHJlbkxlbmd0aCAhPT0gMCkgeyBwcm9wcyA9IHt9OyB9IGlmIChwcm9wcyAmJiBkZWZhdWx0UHJvcHMpIHsgZm9yICh2YXIgcHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7IGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHZvaWQgMCkgeyBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdOyB9IH0gfSBlbHNlIGlmICghcHJvcHMpIHsgcHJvcHMgPSBkZWZhdWx0UHJvcHMgfHwge307IH0gaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7IHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47IH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7IHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpOyBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHsgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgM107IH0gcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5OyB9IHJldHVybiB7ICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsIHR5cGU6IHR5cGUsIGtleToga2V5ID09PSB1bmRlZmluZWQgPyBudWxsIDogJycgKyBrZXksIHJlZjogbnVsbCwgcHJvcHM6IHByb3BzLCBfb3duZXI6IG51bGwgfTsgfTsgfSgpO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RIZWxtZXQpO1xuXHRcblx0dmFyIF9hcGhyb2RpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XG5cdHZhciBfc3R5bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgX3JlZiA9IF9qc3goX3JlYWN0SGVsbWV0Mi5kZWZhdWx0LCB7XG5cdCAgdGl0bGU6ICc0MDQnXG5cdH0pO1xuXHRcblx0dmFyIE5vdEZvdW5kID0gZnVuY3Rpb24gTm90Rm91bmQoKSB7XG5cdCAgcmV0dXJuIF9qc3goJ2RpdicsIHt9LCB2b2lkIDAsIF9yZWYsIF9qc3goJ2gxJywge30sIHZvaWQgMCwgJ1BhZ2UgTm90IEZvdW5kIScpKTtcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE5vdEZvdW5kO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxMDk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfanN4ID0gZnVuY3Rpb24gKCkgeyB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIikgfHwgMHhlYWM3OyByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUmF3UmVhY3RFbGVtZW50KHR5cGUsIHByb3BzLCBrZXksIGNoaWxkcmVuKSB7IHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzOyB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMzsgaWYgKCFwcm9wcyAmJiBjaGlsZHJlbkxlbmd0aCAhPT0gMCkgeyBwcm9wcyA9IHt9OyB9IGlmIChwcm9wcyAmJiBkZWZhdWx0UHJvcHMpIHsgZm9yICh2YXIgcHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7IGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHZvaWQgMCkgeyBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdOyB9IH0gfSBlbHNlIGlmICghcHJvcHMpIHsgcHJvcHMgPSBkZWZhdWx0UHJvcHMgfHwge307IH0gaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7IHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47IH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7IHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpOyBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHsgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgM107IH0gcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5OyB9IHJldHVybiB7ICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsIHR5cGU6IHR5cGUsIGtleToga2V5ID09PSB1bmRlZmluZWQgPyBudWxsIDogJycgKyBrZXksIHJlZjogbnVsbCwgcHJvcHM6IHByb3BzLCBfb3duZXI6IG51bGwgfTsgfTsgfSgpO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RIZWxtZXQpO1xuXHRcblx0dmFyIF9hcGhyb2RpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XG5cdHZhciBfc3R5bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XG5cdHZhciBfZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcblx0XG5cdHZhciBfZGF0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYXRhKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvLyBUaGlzIGlzIGEgc3RhdGljIHBhZ2UuIEl0IHVzZXMgYW4gYXJyYXkgdG8gaG9sZCBkYXRhIGFib3V0IHRoZSByZXNvdXJjZXNcblx0Ly8gYW5kIG1haW50YWluIERSWVxuXHRcblx0dmFyIF9yZWYgPSBfanN4KF9yZWFjdEhlbG1ldDIuZGVmYXVsdCwge1xuXHQgIHRpdGxlOiAnQWJvdXQnXG5cdH0pO1xuXHRcblx0dmFyIEFib3V0ID0gZnVuY3Rpb24gQWJvdXQocHJvcHMpIHtcblx0ICByZXR1cm4gX2pzeCgnZGl2Jywge30sIHZvaWQgMCwgX3JlZiwgX2pzeCgnaDInLCB7XG5cdCAgICBjbGFzc05hbWU6ICgwLCBfYXBocm9kaXRlLmNzcykoc3R5bGVzLmhlYWRlcilcblx0ICB9LCB2b2lkIDAsICdBYm91dCcpLCBfanN4KCdwJywge1xuXHQgICAgY2xhc3NOYW1lOiAoMCwgX2FwaHJvZGl0ZS5jc3MpKHN0eWxlcy5sZWFkKVxuXHQgIH0sIHZvaWQgMCwgJ1RoaXMgaXMgYW4gZXhhbXBsZSByZWFjdCBhcHBsaWNhdGlvbiAobWFzdGVyLWRldGFpbCBmZWVkKSB3aXRoIGlzb21vcnBoaWMgcmVuZGVyaW5nLCBhc3luYyByZWFjdC1yb3V0ZXIgcm91dGVzLCBhc3luYyByZWR1eCByZWR1Y2VycywgYXN5bmMgZGF0YSBmZXRjaGluZywgYW5kIGNvZGUtc3BsaXR0aW5nLicpLCBfanN4KCdoMicsIHtcblx0ICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMuaGVhZGVyKVxuXHQgIH0sIHZvaWQgMCwgJ01vdGl2YXRpb24nKSwgX2pzeCgncCcsIHtcblx0ICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMubGVhZClcblx0ICB9LCB2b2lkIDAsICdUaGUgZmlsZSBzaXplIG9mIGlzb21vcnBoaWMgUmVhY3QgYXBwcyBjYW4gcXVpY2tseSBnZXQgb3V0IG9mIGhhbmQuIE1hbnkgaXNvbW9ycGhpYyBzdGFydGVyIGtpdHMgbG9vayBhd2Vzb21lIHRvIGJlZ2luIHdpdGggYnV0IHlpZWxkIGEgc2V2ZXJhbCBtZWdhYnl0ZSBqYXZhc2NyaXB0IGZpbGUgZm9yIHRoZSBjbGllbnQgdG8gZG93bmxvYWQuIFRoaXMgcHJvamVjdCBhaW1zIHRvIGRlbW9uc3RyYXRlIHNvbWUgcG9zc2libGUgc29sdXRpb25zLicpLCBfanN4KCdoMicsIHtcblx0ICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMuaGVhZGVyKVxuXHQgIH0sIHZvaWQgMCwgJ1VuZGVyIHRoZSBIb29kJyksIF9qc3goJ3VsJywge1xuXHQgICAgY2xhc3NOYW1lOiAoMCwgX2FwaHJvZGl0ZS5jc3MpKHN0eWxlcy5saXN0KVxuXHQgIH0sIHZvaWQgMCwgX2RhdGEyLmRlZmF1bHQubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG5cdCAgICByZXR1cm4gX2pzeCgnbGknLCB7fSwgdm9pZCAwLCBfanN4KCdoMycsIHt9LCB2b2lkIDAsIF9qc3goJ2EnLCB7XG5cdCAgICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMubGluayksXG5cdCAgICAgIGhyZWY6IGl0ZW0ubGluayxcblx0ICAgICAgdGFyZ2V0OiAnX2JsYW5rJ1xuXHQgICAgfSwgdm9pZCAwLCBpdGVtLnJlc291cmNlKSksIF9qc3goJ3AnLCB7XG5cdCAgICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMuYm9keSlcblx0ICAgIH0sIHZvaWQgMCwgaXRlbS5kZXNjcmlwdGlvbikpO1xuXHQgIH0pKSk7XG5cdH07XG5cdFxuXHR2YXIgc3R5bGVzID0gX2FwaHJvZGl0ZS5TdHlsZVNoZWV0LmNyZWF0ZSh7XG5cdCAgaGVhZGVyOiB7XG5cdCAgICBmb250U2l6ZTogJzM2cHgnLFxuXHQgICAgbGluZUhlaWdodDogJzEuNScsXG5cdCAgICBtYXJnaW46ICcwIDAgMS41cmVtJ1xuXHQgIH0sXG5cdCAgbGVhZDoge1xuXHQgICAgZm9udFNpemU6ICcxLjI1cmVtJyxcblx0ICAgIGxpbmVIZWlnaHQ6ICcxLjUnLFxuXHQgICAgbWFyZ2luOiAnMCAwIDEuNXJlbScsXG5cdCAgICBjb2xvcjogJyM1NTUnXG5cdCAgfSxcblx0ICBib2R5OiB7XG5cdCAgICBmb250U2l6ZTogJzFyZW0nLFxuXHQgICAgbGluZUhlaWdodDogJzEuNScsXG5cdCAgICBtYXJnaW46ICcwIDAgMS41cmVtJyxcblx0ICAgIGNvbG9yOiAnIzU1NSdcblx0ICB9LFxuXHQgIGxpc3Q6IHtcblx0ICAgIGZvbnRTaXplOiAnMXJlbScsXG5cdCAgICBsaXN0U3R5bGU6ICdub25lJyxcblx0ICAgIHBhZGRpbmc6IDBcblx0ICB9LFxuXHQgIGxpbms6IHtcblx0ICAgIGRpc3BsYXk6ICdibG9jaycsXG5cdCAgICBmb250U2l6ZTogJzEuMjVyZW0nLFxuXHQgICAgbWFyZ2luOiAnMCAwIC41cmVtJyxcblx0ICAgIGxpbmVIZWlnaHQ6ICcxLjUnLFxuXHQgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuXHQgICAgY29sb3I6ICcjMDhjJyxcblx0ICAgIG9wYWNpdHk6IDEsXG5cdCAgICB0cmFuc2l0aW9uOiAnLjJzIG9wYWNpdHkgZWFzZScsXG5cdCAgICAnOmhvdmVyJzoge1xuXHQgICAgICBvcGFjaXR5OiAuNVxuXHQgICAgfVxuXHQgIH1cblx0fSk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBBYm91dDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTEwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHZhciBkYXRhID0gW3tcblx0ICByZXNvdXJjZTogJ05vZGUuanMnLFxuXHQgIGxpbms6ICdodHRwczovL25vZGVqcy5vcmcvZW4vJyxcblx0ICBkZXNjcmlwdGlvbjogJ05vZGUuanPCriBpcyBhIEphdmFTY3JpcHQgcnVudGltZSBidWlsdCBvbiBDaHJvbWVcXCdzIFY4IEphdmFTY3JpcHQgZW5naW5lLiBOb2RlLmpzIHVzZXMgYW4gZXZlbnQtZHJpdmVuLCBub24tYmxvY2tpbmcgSS9PIG1vZGVsIHRoYXQgbWFrZXMgaXQgbGlnaHR3ZWlnaHQgYW5kIGVmZmljaWVudC4gTm9kZS5qc1xcJyBwYWNrYWdlIGVjb3N5c3RlbSwgbnBtLCBpcyB0aGUgbGFyZ2VzdCBlY29zeXN0ZW0gb2Ygb3BlbiBzb3VyY2UgbGlicmFyaWVzIGluIHRoZSB3b3JsZC4nXG5cdH0sIHtcblx0ICByZXNvdXJjZTogJ0V4cHJlc3MnLFxuXHQgIGxpbms6ICdodHRwczovL2dpdGh1Yi5jb20vZXhwcmVzc2pzL2V4cHJlc3MnLFxuXHQgIGRlc2NyaXB0aW9uOiAnRmFzdCwgdW5vcGluaW9uYXRlZCwgbWluaW1hbGlzdCB3ZWIgZnJhbWV3b3JrIGZvciBOb2RlLmpzJ1xuXHR9LCB7XG5cdCAgcmVzb3VyY2U6ICdSZWFjdCcsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdCcsXG5cdCAgZGVzY3JpcHRpb246ICdBIGRlY2xhcmF0aXZlLCBlZmZpY2llbnQsIGFuZCBmbGV4aWJsZSBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIGJ1aWxkaW5nIHVzZXIgaW50ZXJmYWNlcy4nIH0sIHtcblx0ICByZXNvdXJjZTogJ1JlZHV4Jyxcblx0ICBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVkdXgnLFxuXHQgIGRlc2NyaXB0aW9uOiAnUHJlZGljdGFibGUgc3RhdGUgY29udGFpbmVyIGZvciBKYXZhU2NyaXB0IGFwcHMnXG5cdH0sIHtcblx0ICByZXNvdXJjZTogJ1JlYWN0IFJvdXRlciAyLjAnLFxuXHQgIGxpbms6ICdodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXInLFxuXHQgIGRlc2NyaXB0aW9uOiAnQSBjb21wbGV0ZSByb3V0aW5nIHNvbHV0aW9uIGZvciBSZWFjdC5qcydcblx0fSwgeyByZXNvdXJjZTogJ0FwaHJvZGl0ZSBmb3IgQ1NTJyxcblx0ICBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL0toYW4vYXBocm9kaXRlJyxcblx0ICBkZXNjcmlwdGlvbjogJ1N1cHBvcnQgZm9yIGNvbG9jYXRpbmcgeW91ciBzdHlsZXMgd2l0aCB5b3VyIEphdmFTY3JpcHQgY29tcG9uZW50LiBJdFxcJ3MgaW5saW5lIHN0eWxlcywgYnV0IHRoZXkgd29yayEnXG5cdH0sIHtcblx0ICByZXNvdXJjZTogJ1JlYWN0IEhlbG1ldCcsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZmwvcmVhY3QtaGVsbWV0Jyxcblx0ICBkZXNjcmlwdGlvbjogJ0EgZG9jdW1lbnQgaGVhZCBtYW5hZ2VyIGZvciBSZWFjdCdcblx0fSwgeyByZXNvdXJjZTogJ1JlZGlhbCBmb3IgZGF0YSBmZXRjaGluZycsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZGFsZ2xlaXNoL3JlZGlhbCcsXG5cdCAgZGVzY3JpcHRpb246ICdVbml2ZXJzYWwgZGF0YSBmZXRjaGluZyBhbmQgcm91dGUgbGlmZWN5Y2xlIG1hbmFnZW1lbnQgZm9yIFJlYWN0J1xuXHR9LCB7IHJlc291cmNlOiAnQmFiZWwgNicsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbCcsXG5cdCAgZGVzY3JpcHRpb246ICdCYWJlbCBpcyBhIGNvbXBpbGVyIGZvciB3cml0aW5nIG5leHQgZ2VuZXJhdGlvbiBKYXZhU2NyaXB0Lidcblx0fSwge1xuXHQgIHJlc291cmNlOiAnV2VicGFjaycsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2snLFxuXHQgIGRlc2NyaXB0aW9uOiAnV2VicGFjayBpcyBhIGJ1bmRsZXIgZm9yIG1vZHVsZXMuIFRoZSBtYWluIHB1cnBvc2UgaXMgdG8gYnVuZGxlIEphdmFTY3JpcHQgZmlsZXMgZm9yIHVzYWdlIGluIGEgYnJvd3NlciwgeWV0IGl0IGlzIGFsc28gY2FwYWJsZSBvZiB0cmFuc2Zvcm1pbmcsIGJ1bmRsaW5nLCBvciBwYWNrYWdpbmcganVzdCBhYm91dCBhbnkgcmVzb3VyY2Ugb3IgYXNzZXQuJ1xuXHR9LCB7IHJlc291cmNlOiAnUmVhY3QgSG90IExvYWRlcicsXG5cdCAgbGluazogJ2h0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXInLFxuXHQgIGRlc2NyaXB0aW9uOiAnVHdlYWsgUmVhY3QgY29tcG9uZW50cyBpbiByZWFsIHRpbWUuJ1xuXHR9XTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGRhdGE7XG5cbi8qKiovIH0sXG5cbi8qKiovIDExMTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9BYm91dCA9IF9fd2VicGFja19yZXF1aXJlX18oMTA5KTtcblx0XG5cdHZhciBfQWJvdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWJvdXQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IHtcblx0ICBwYXRoOiAnYWJvdXQnLFxuXHQgIGNvbXBvbmVudDogX0Fib3V0Mi5kZWZhdWx0XG5cdH07XG5cbi8qKiovIH0sXG5cbi8qKiovIDExNzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Ob3RGb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjApO1xuXHRcblx0dmFyIF9Ob3RGb3VuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ob3RGb3VuZCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge1xuXHQgIHBhdGg6ICcqJyxcblx0ICBjb21wb25lbnQ6IF9Ob3RGb3VuZDIuZGVmYXVsdFxuXHR9O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxMTk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUm91dGVzO1xuXHRcblx0dmFyIF9zdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHRcblx0aWYgKGZhbHNlKSByZXF1aXJlLmVuc3VyZSA9IGZ1bmN0aW9uIChkLCBjKSB7XG5cdCAgcmV0dXJuIGMocmVxdWlyZSk7XG5cdH07XG5cdGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcyhzdG9yZSkge1xuXHQgIHJldHVybiB7XG5cdCAgICBwYXRoOiAncG9zdC86c2x1ZycsXG5cdCAgICBnZXRDb21wb25lbnRzOiBmdW5jdGlvbiBnZXRDb21wb25lbnRzKGxvY2F0aW9uLCBjYikge1xuXHQgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmUvKiBuc3VyZSAqLygzLCBmdW5jdGlvbiAocmVxdWlyZSkge1xuXHQgICAgICAgIHZhciBQb3N0UGFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpLmRlZmF1bHQ7XG5cdCAgICAgICAgdmFyIHBvc3RSZWR1Y2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MykuZGVmYXVsdDtcblx0ICAgICAgICAoMCwgX3N0b3JlLmluamVjdEFzeW5jUmVkdWNlcikoc3RvcmUsICdjdXJyZW50UG9zdCcsIHBvc3RSZWR1Y2VyKTtcblx0ICAgICAgICBjYihudWxsLCBQb3N0UGFnZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblxuLyoqKi8gfVxuXG59OztcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAxLmluZGV4LmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEhlbG1ldCBmcm9tICdyZWFjdC1oZWxtZXQnO1xyXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xyXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi4vc3R5bGUnO1xyXG5cclxuY29uc3QgTm90Rm91bmQgPSAoKSA9PlxyXG4gIDxkaXY+XHJcbiAgICA8SGVsbWV0IHRpdGxlPVwiNDA0XCIgLz5cclxuXHJcbiAgICA8aDE+UGFnZSBOb3QgRm91bmQhPC9oMT5cclxuICA8L2Rpdj47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOb3RGb3VuZDtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy9Ob3RGb3VuZC5qc1xuICoqLyIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSGVsbWV0IGZyb20gJ3JlYWN0LWhlbG1ldCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uLy4uLy4uL3N0eWxlJztcbmltcG9ydCBkYXRhIGZyb20gJy4uL2RhdGEnO1xuXG4vLyBUaGlzIGlzIGEgc3RhdGljIHBhZ2UuIEl0IHVzZXMgYW4gYXJyYXkgdG8gaG9sZCBkYXRhIGFib3V0IHRoZSByZXNvdXJjZXNcbi8vIGFuZCBtYWludGFpbiBEUllcbmNvbnN0IEFib3V0ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxIZWxtZXRcbiAgICAgICAgdGl0bGU9XCJBYm91dFwiXG4gICAgICAgIC8+XG4gICAgICA8aDIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmhlYWRlcil9PkFib3V0PC9oMj5cbiAgICAgIDxwIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sZWFkKX0+XG4gICAgICAgIFRoaXMgaXMgYW4gZXhhbXBsZSByZWFjdCBhcHBsaWNhdGlvbiAobWFzdGVyLWRldGFpbCBmZWVkKSB3aXRoIGlzb21vcnBoaWMgcmVuZGVyaW5nLCBhc3luYyByZWFjdC1yb3V0ZXIgcm91dGVzLCBhc3luYyByZWR1eCByZWR1Y2VycywgYXN5bmMgZGF0YSBmZXRjaGluZywgYW5kIGNvZGUtc3BsaXR0aW5nLlxuICAgICAgPC9wPlxuICAgICAgPGgyIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5oZWFkZXIpfT5Nb3RpdmF0aW9uPC9oMj5cbiAgICAgIDxwIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sZWFkKX0+VGhlIGZpbGUgc2l6ZSBvZiBpc29tb3JwaGljIFJlYWN0IGFwcHMgY2FuIHF1aWNrbHkgZ2V0IG91dCBvZiBoYW5kLiBNYW55IGlzb21vcnBoaWMgc3RhcnRlciBraXRzIGxvb2sgYXdlc29tZSB0byBiZWdpbiB3aXRoIGJ1dCB5aWVsZCBhIHNldmVyYWwgbWVnYWJ5dGUgamF2YXNjcmlwdCBmaWxlIGZvciB0aGUgY2xpZW50IHRvIGRvd25sb2FkLiBUaGlzIHByb2plY3QgYWltcyB0byBkZW1vbnN0cmF0ZSBzb21lIHBvc3NpYmxlIHNvbHV0aW9ucy48L3A+XG4gICAgICA8aDIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmhlYWRlcil9PlVuZGVyIHRoZSBIb29kPC9oMj5cbiAgICAgIDx1bCBjbGFzc05hbWU9e2NzcyhzdHlsZXMubGlzdCl9PlxuICAgICAgICB7IGRhdGEubWFwKChpdGVtLCBpKSA9PiA8bGk+XG4gICAgICAgICAgPGgzPjxhIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5saW5rKX0gaHJlZj17aXRlbS5saW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj57aXRlbS5yZXNvdXJjZX08L2E+PC9oMz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e2NzcyhzdHlsZXMuYm9keSl9PntpdGVtLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICA8L2xpPikgfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgaGVhZGVyOiB7XG4gICAgZm9udFNpemU6ICczNnB4JyxcbiAgICBsaW5lSGVpZ2h0OiAnMS41JyxcbiAgICBtYXJnaW46ICcwIDAgMS41cmVtJyxcbiAgfSxcbiAgbGVhZDoge1xuICAgIGZvbnRTaXplOiAnMS4yNXJlbScsXG4gICAgbGluZUhlaWdodDogJzEuNScsXG4gICAgbWFyZ2luOiAnMCAwIDEuNXJlbScsXG4gICAgY29sb3I6ICcjNTU1JyxcbiAgfSxcbiAgYm9keToge1xuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgbGluZUhlaWdodDogJzEuNScsXG4gICAgbWFyZ2luOiAnMCAwIDEuNXJlbScsXG4gICAgY29sb3I6ICcjNTU1JyxcbiAgfSxcbiAgbGlzdDoge1xuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgcGFkZGluZzogMCxcbiAgfSxcbiAgbGluazoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICcxLjI1cmVtJyxcbiAgICBtYXJnaW46ICcwIDAgLjVyZW0nLFxuICAgIGxpbmVIZWlnaHQ6ICcxLjUnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBjb2xvcjogJyMwOGMnLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNpdGlvbjogJy4ycyBvcGFjaXR5IGVhc2UnLFxuICAgICc6aG92ZXInOiB7XG4gICAgICBvcGFjaXR5OiAuNSxcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEFib3V0O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcm91dGVzL0Fib3V0L2NvbXBvbmVudHMvQWJvdXQuanNcbiAqKi8iLCJjb25zdCBkYXRhID0gW1xuICB7XG4gICAgcmVzb3VyY2U6ICdOb2RlLmpzJyxcbiAgICBsaW5rOidodHRwczovL25vZGVqcy5vcmcvZW4vJyxcbiAgICBkZXNjcmlwdGlvbjogJ05vZGUuanPCriBpcyBhIEphdmFTY3JpcHQgcnVudGltZSBidWlsdCBvbiBDaHJvbWVcXCdzIFY4IEphdmFTY3JpcHQgZW5naW5lLiBOb2RlLmpzIHVzZXMgYW4gZXZlbnQtZHJpdmVuLCBub24tYmxvY2tpbmcgSS9PIG1vZGVsIHRoYXQgbWFrZXMgaXQgbGlnaHR3ZWlnaHQgYW5kIGVmZmljaWVudC4gTm9kZS5qc1xcJyBwYWNrYWdlIGVjb3N5c3RlbSwgbnBtLCBpcyB0aGUgbGFyZ2VzdCBlY29zeXN0ZW0gb2Ygb3BlbiBzb3VyY2UgbGlicmFyaWVzIGluIHRoZSB3b3JsZC4nXG4gIH0sXG4gIHtcbiAgICByZXNvdXJjZTogJ0V4cHJlc3MnLFxuICAgIGxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9leHByZXNzanMvZXhwcmVzcycsXG4gICAgZGVzY3JpcHRpb246ICdGYXN0LCB1bm9waW5pb25hdGVkLCBtaW5pbWFsaXN0IHdlYiBmcmFtZXdvcmsgZm9yIE5vZGUuanMnXG4gIH0sXG4gIHtcbiAgICByZXNvdXJjZTogJ1JlYWN0JyxcbiAgICBsaW5rOidodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QnLFxuICAgIGRlc2NyaXB0aW9uOiAnQSBkZWNsYXJhdGl2ZSwgZWZmaWNpZW50LCBhbmQgZmxleGlibGUgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBidWlsZGluZyB1c2VyIGludGVyZmFjZXMuJyB9LFxuICB7XG4gICAgcmVzb3VyY2U6ICdSZWR1eCcsXG4gICAgbGluazonaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVkdXgnLFxuICAgIGRlc2NyaXB0aW9uOiAnUHJlZGljdGFibGUgc3RhdGUgY29udGFpbmVyIGZvciBKYXZhU2NyaXB0IGFwcHMnXG4gIH0sXG4gIHtcbiAgICByZXNvdXJjZTogJ1JlYWN0IFJvdXRlciAyLjAnLFxuICAgIGxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlcicsXG4gICAgZGVzY3JpcHRpb246ICdBIGNvbXBsZXRlIHJvdXRpbmcgc29sdXRpb24gZm9yIFJlYWN0LmpzJ1xuICB9LFxuICB7IHJlc291cmNlOiAnQXBocm9kaXRlIGZvciBDU1MnLFxuICAgIGxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9LaGFuL2FwaHJvZGl0ZScsXG4gICAgZGVzY3JpcHRpb246ICdTdXBwb3J0IGZvciBjb2xvY2F0aW5nIHlvdXIgc3R5bGVzIHdpdGggeW91ciBKYXZhU2NyaXB0IGNvbXBvbmVudC4gSXRcXCdzIGlubGluZSBzdHlsZXMsIGJ1dCB0aGV5IHdvcmshJ1xuICB9LFxuICB7XG4gICAgcmVzb3VyY2U6ICdSZWFjdCBIZWxtZXQnLFxuICAgIGxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9uZmwvcmVhY3QtaGVsbWV0JyxcbiAgICBkZXNjcmlwdGlvbjogJ0EgZG9jdW1lbnQgaGVhZCBtYW5hZ2VyIGZvciBSZWFjdCdcbiAgfSxcbiAgeyByZXNvdXJjZTogJ1JlZGlhbCBmb3IgZGF0YSBmZXRjaGluZycsXG4gICAgbGluazonaHR0cHM6Ly9naXRodWIuY29tL21hcmtkYWxnbGVpc2gvcmVkaWFsJyxcbiAgICBkZXNjcmlwdGlvbjogJ1VuaXZlcnNhbCBkYXRhIGZldGNoaW5nIGFuZCByb3V0ZSBsaWZlY3ljbGUgbWFuYWdlbWVudCBmb3IgUmVhY3QnXG4gIH0sXG4gIHsgcmVzb3VyY2U6ICdCYWJlbCA2JyxcbiAgICBsaW5rOidodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwnLFxuICAgIGRlc2NyaXB0aW9uOiAnQmFiZWwgaXMgYSBjb21waWxlciBmb3Igd3JpdGluZyBuZXh0IGdlbmVyYXRpb24gSmF2YVNjcmlwdC4nXG4gIH0sXG4gIHtcbiAgICByZXNvdXJjZTogJ1dlYnBhY2snLFxuICAgIGxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2snLFxuICAgIGRlc2NyaXB0aW9uOiAnV2VicGFjayBpcyBhIGJ1bmRsZXIgZm9yIG1vZHVsZXMuIFRoZSBtYWluIHB1cnBvc2UgaXMgdG8gYnVuZGxlIEphdmFTY3JpcHQgZmlsZXMgZm9yIHVzYWdlIGluIGEgYnJvd3NlciwgeWV0IGl0IGlzIGFsc28gY2FwYWJsZSBvZiB0cmFuc2Zvcm1pbmcsIGJ1bmRsaW5nLCBvciBwYWNrYWdpbmcganVzdCBhYm91dCBhbnkgcmVzb3VyY2Ugb3IgYXNzZXQuJ1xuICB9LFxuICB7IHJlc291cmNlOiAnUmVhY3QgSG90IExvYWRlcicsXG4gICAgbGluazonaHR0cHM6Ly9naXRodWIuY29tL2dhZWFyb24vcmVhY3QtaG90LWxvYWRlcicsXG4gICAgZGVzY3JpcHRpb246ICdUd2VhayBSZWFjdCBjb21wb25lbnRzIGluIHJlYWwgdGltZS4nXG4gIH0sXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcm91dGVzL0Fib3V0L2RhdGEuanNcbiAqKi8iLCJpbXBvcnQgQWJvdXQgZnJvbSAnLi9jb21wb25lbnRzL0Fib3V0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwYXRoOiAnYWJvdXQnLFxuICBjb21wb25lbnQ6IEFib3V0LFxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3JvdXRlcy9BYm91dC9pbmRleC5qc1xuICoqLyIsImltcG9ydCBOb3RGb3VuZCBmcm9tICcuLi8uLi9jb21wb25lbnRzL05vdEZvdW5kJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHBhdGg6ICcqJyxcclxuICBjb21wb25lbnQ6IE5vdEZvdW5kXHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9yb3V0ZXMvTm90Rm91bmQvaW5kZXguanNcbiAqKi8iLCJpZiAodHlwZW9mIHJlcXVpcmUuZW5zdXJlICE9PSAnZnVuY3Rpb24nKSByZXF1aXJlLmVuc3VyZSA9IChkLCBjKSA9PiBjKHJlcXVpcmUpO1xuaW1wb3J0IHsgaW5qZWN0QXN5bmNSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXMoc3RvcmUpIHtcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiAncG9zdC86c2x1ZycsXG4gICAgZ2V0Q29tcG9uZW50cyhsb2NhdGlvbiwgY2IpIHtcbiAgICAgIHJlcXVpcmUuZW5zdXJlKFtcbiAgICAgICAgICAnLi9jb250YWluZXJzL1Bvc3RQYWdlJyxcbiAgICAgICAgICAnLi9yZWR1Y2VyJyxcbiAgICAgICAgXSwgKHJlcXVpcmUpID0+IHtcbiAgICAgICAgICBsZXQgUG9zdFBhZ2UgPSByZXF1aXJlKCcuL2NvbnRhaW5lcnMvUG9zdFBhZ2UnKS5kZWZhdWx0O1xuICAgICAgICAgIGxldCBwb3N0UmVkdWNlciA9IHJlcXVpcmUoJy4vcmVkdWNlcicpLmRlZmF1bHQ7XG4gICAgICAgICAgaW5qZWN0QXN5bmNSZWR1Y2VyKHN0b3JlLCAnY3VycmVudFBvc3QnLCBwb3N0UmVkdWNlcik7XG4gICAgICAgICAgY2IobnVsbCwgUG9zdFBhZ2UpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcm91dGVzL1Bvc3QvaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9